// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Role {
    id                String    @id @default(cuid())
    title             String
    requisitionNumber String?
    status            Status
    lastStatus        Status?
    statusConfidence  Float
    contacts          Contact[] @relation("RoleContacts")
    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt
    createdBy         User      @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById       String
    company           Company   @relation(fields: [companyId], references: [id])
    companyId         Int

    @@index([createdById, companyId])
}

enum Status {
    APPLIED
    IN_PROGRESS_RECRUITER_CONTACT
    IN_PROGRESS_ONLINE_ASSESMENT
    IN_PROGRESS_CASE_STUDY
    IN_PROGRESS_INTERVIEW_ROUND_1
    IN_PROGRESS_INTERVIEW_ROUND_2
    IN_PROGRESS_INTERVIEW_ROUND_3
    IN_PROGRESS_INTERVIEW_ROUND_4
    IN_PROGRESS_INTERVIEW_ROUND_5
    IN_PROGRESS_INTERVIEW_ROUND_6
    IN_PROGRESS_INTERVIEW_ROUND_7
    REJECTED
    OFFER_RECEIVED
    OFFER_DECLINED
}

model Company {
    id       Int     @id @default(autoincrement())
    name     String  @unique
    domain   String? 
    roles    Role[]
    contacts Contact[]
}

model Contact {
    id        String  @id @default(cuid())
    email     String  @unique
    name      String
    title     String?
    company   Company @relation(fields: [companyId], references: [id])
    companyId Int     
    roles     Role[]  @relation("RoleContacts")

    @@index([companyId])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? 
    access_token             String? 
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? 
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    roles         Role[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
